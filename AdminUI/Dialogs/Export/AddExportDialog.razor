@using AdminUI.ApiServices
@using AutoMapper
@using System.Net.Http.Json
@inject IMapper Mapper
@inject ExportServices Service
@inject ProductService ProductService
@inject HttpClient Http
@inject ISnackbar Snackbar

<MudDialog >
    <DialogContent>
        
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    private MudForm form;
    public ExportModel Data { get; set; } = new();

    string _searchString = null!;

    public List<ProductModel> ProductData { get; set; }
    public List<SelectExportItem> ItemList { get; set; }
    public List<SelectExportItem> SelectedItem { get; set; } = new();

    MudTabs tabs;

    int _selectedCount = 0;
    bool _loadProduct = false;
    bool _step2 = true;
    bool _step3 = true;

    string warehouse = "W001";
    int agency = 1;

    private async Task SubmitForm()
    {
        await form.Validate();
        if (form.IsValid)
        {
            //var result = Mapper.Map<AgencyModel>(Data);
            // Form is valid, close the dialog and pass the data
            MudDialog.Close(DialogResult.Ok(Data));
        }
    }


    private void OnInvalidSubmit()
    {
        // Handle invalid form submission (e.g., display error messages)
    }

    private void Cancel() => MudDialog.Cancel();

    int spacing = 0;

    #region ProductData
    private Func<SelectExportItem, bool> _quickFilterProduct => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.Id}".Contains(_searchString))
            return true;

        return false;
    };

    private async Task OpenAddItemDialog(SelectExportItem item)
    {

    }

    void Activate(int index)
    {
        tabs.ActivatePanel(index);
    }

    private void SeclectItemCommit(SelectExportItem item)
    {
        if (!SelectedItem.Contains(item) && item.ExportQty != 0 && item.ExportPrice != 0)
        {
            SelectedItem.Add(item);
            _selectedCount++;
        }
        else if (SelectedItem.Contains(item) && (item.ExportPrice == 0 || item.ExportQty == 0))
        {
            SelectedItem.Remove(item);
            item.ExportQty = 0;
            item.ExportPrice = 0;
            _selectedCount--;
            Snackbar.Add("Số lượng và giá phải khác 0", Severity.Error);
        }
        else
        {
            item.ExportQty = 0;
            item.ExportPrice = 0;
            Snackbar.Add("Số lượng và giá phải khác 0", Severity.Error);
        }
    }

    private async Task LoadProductData()
    {
        if (!_loadProduct)
        {
            ProductData = await ProductService.GetAllAsync();
            ItemList = Mapper.Map<List<SelectExportItem>>(ProductData);
            _loadProduct = true;
        }
    }

    private async Task Submit()
    {
        var items = Mapper.Map<List<ExportItem>>(SelectedItem);
        var data = new ExportModel
            {
                AgencyId = agency,
                CreatedOn = DateTime.Now,
                Amount = items.Sum(a => a.Quantity * a.UnitPrice),
                Items = items
            };
        var result = await Service.CreateAsync(data);
        if (result)
        {
            Snackbar.Add("Ok", Severity.Success);
        }
        else
        {
            Snackbar.Add("Faild", Severity.Error);
        }
    }

    async void OnStep1Next()
    {
        _step2 = false;
        await Task.Delay(10);
        Activate(1);
    }
    async void OnStep2Next()
    {
        _step3 = false;
        await Task.Delay(10);
        Activate(2);
    }
    #endregion
}

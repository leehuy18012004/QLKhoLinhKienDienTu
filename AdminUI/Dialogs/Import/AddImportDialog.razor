@using AdminUI.ApiServices
@using AutoMapper
@using System.Net.Http.Json
@inject IMapper Mapper
@inject ImportServices Service
@inject ProductService ProductService
@inject WarehouseServices WarehouseService
@inject SuplierServices SuplierService
@inject CategoryServices CategoryService
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudDialog Style="height:100vh">
    <DialogContent>
        <div class="row my-2">
            <div class="col-md-4 px-3 mt-2">
                <MudPaper Outlined Elevation="1" Class="pa-5">
                    <MudForm @ref=form>
                        <MudTextField Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Outlined.Numbers" AdornmentColor="Color.Default" Placeholder="REF000xxx" Margin="Margin.Dense" Variant="Variant.Outlined" @bind-Value=Data.Id Label="Số chứng từ" Required RequiredError="@("Chưa nhập số chứng từ!")" />
                        <MudSelect Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Outlined.Assistant" AdornmentColor="Color.Default" Text="Chọn nhà cung cấp" Label="Nhà cung cấp" Margin="Margin.Dense" Variant="Variant.Outlined" @bind-Value=Data.SuplierId T="int" Required RequiredError="@("Chưa chọn nhà cung cấp!")">
                            @foreach (var suplier in SuplierData)
                            {
                                <MudSelectItem Value=suplier.Id>@suplier.Name</MudSelectItem>
                            }
                        </MudSelect>
                        <MudSelect Text="Chọn kho nhập" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Outlined.Warehouse" AdornmentColor="Color.Default" Label="Kho nhập" Margin="Margin.Dense" Variant="Variant.Outlined" @bind-Value=Data.WarehouseId T="string" Required RequiredError="@("Chưa chọn kho nhập!")">
                            @foreach (var warehouse in WarehouseData)
                            {
                                <MudSelectItem Value=warehouse.Id>@warehouse.Name</MudSelectItem>
                            }
                        </MudSelect>
                        <MudDatePicker Variant="Variant.Outlined" Margin="Margin.Dense" DateFormat="@("dd/MM/yyyy")" PickerVariant="PickerVariant.Dialog" Label="Ngày thanh toán" DisplayMonths="1" TitleDateFormat="dddd, dd MMMM" @bind-Date="Data.PaidDate" />
                    </MudForm>
                </MudPaper>
            </div>
            <div class="col-md-8 my-2">
                <MudDataGrid Outlined Elevation="1" T="ProductModel" ReadOnly="false" EditMode="DataGridEditMode.Form" QuickFilter="@_quickFilter"
                             Bordered="false" Dense="true" Items="ProductData" Filterable="false" Hover="true" SortMode="SortMode.None"
                             EditTrigger="DataGridEditTrigger.Manual" ColumnResizeMode="ResizeMode.Column"
                             Virtualize="true" Height="184px" FixedHeader="true">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Chọn sản phẩm</MudText>
                        <MudSpacer />

                        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.End" Immediate="true"
                                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="ml-1"></MudTextField>
                    </ToolBarContent>
                    <Columns>
                        <PropertyColumn Class="w-1" Property="x => x.Id" Title="#" Editable="false" />
                        <PropertyColumn Property="x => x.Name" Title="Sản phẩm" />
                        <TemplateColumn Hidden="false" StickyRight="false" Class="w-1" CellClass="d-flex justify-end">
                            <CellTemplate>
                                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.AddCircle" Color="Color.Warning" OnClick="()=>OpenAddItemDialog(context.Item)" />
                                @* <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.MoreVert" Color="Color.Dark" OnClick="()=> ShowDeleteConfirmation(context.Item)" /> *@
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
            </div>
        </div>
        <div class="row mt-1 mb-5">
            <div class="col-md-9 mt-2">
                <MudDataGrid T="SelectImportItem" ReadOnly="false" EditMode="DataGridEditMode.Form"
                             Bordered="false" Dense="true" Items="SelectedItem" Filterable="false" Hover="true" SortMode="SortMode.None"
                             EditTrigger="DataGridEditTrigger.OnRowClick" ColumnResizeMode="ResizeMode.Column" CommittedItemChanges="OnCommitChanges"
                             Virtualize="true" Height="242px" FixedHeader="true">
                    <Columns>
                        <PropertyColumn Class="w-1" Property="x => x.ProductId" Title="#" Editable="false" />
                        <PropertyColumn Property="x => x.Name" Title="Sản phẩm" Editable="false" />
                        <PropertyColumn Format="@("#,0")" Property="x => x.ImportPrice" Title="Giá nhập" />
                        <PropertyColumn Property="x => x.ImportQty" Title="Số lượng" />
                        <PropertyColumn Format="@("#,0")" Property="x => x.ImportQty*x.ImportPrice" Title="Thành tiền" Editable="false" />
                        <TemplateColumn Hidden="false" StickyRight="false" Class="w-1" CellClass="d-flex justify-end">
                            <CellTemplate>
                                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Cancel" Color="Color.Error" OnClick="()=>RemoveItem(context.Item)" />
                                @* <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.MoreVert" Color="Color.Dark" OnClick="()=> ShowDeleteConfirmation(context.Item)" /> *@
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
            </div>
            <div class="col-md-3 mt-2">
                <MudPaper Class="pa-5">
                    <MudStack>
                        <MudText Color="Color.Warning" Typo="Typo.h6"><MudIcon Icon="@Icons.Material.Filled.SelectAll" /> Tổng tiền nhập</MudText>
                        <MudText Color="Color.Warning" Typo="Typo.h6">@SelectedItem.Sum(p => p.ImportPrice * p.ImportQty).ToString("#,0 VNĐ")</MudText>
                        <MudFlexBreak />
                        <MudButton OnClick="SubmitForm" StartIcon="@Icons.Material.Filled.FactCheck" Variant="Variant.Filled" Color="Color.Tertiary">Xác nhận</MudButton>
                        <MudButton StartIcon="@Icons.Material.Filled.Cancel" Variant="Variant.Filled" Color="Color.Error">Hủy bỏ</MudButton>
                    </MudStack>
                </MudPaper>
            </div>
        </div>

    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    private MudForm form;
    public ImportModel Data { get; set; } = new();

    string _searchString = null!;
    public List<string> Supliers { get; set; } = new List<string> { "abc", "xyz", "jqk" };
    public List<ProductModel> ProductData { get; set; }
    public List<SuplierModel> SuplierData { get; set; } = new();
    public List<WarehouseModel> WarehouseData { get; set; } = new();
    public List<SelectImportItem> SelectedItem { get; set; } = new();

    string orderby = "EMP001";

    protected async override Task OnInitializedAsync()
    {
        ProductData = await ProductService.GetAllAsync();
        SuplierData = await SuplierService.GetAllAsync();
        WarehouseData = await WarehouseService.GetAllAsync();
        //ItemList = Mapper.Map<List<SelectImportItem>>(ProductData);
    }

    private async Task SubmitForm()
    {
        await form.Validate();
        if (form.IsValid)
        {
            Data.Items = new List<ImportItem>();
            Data.OrderBy = orderby;

            foreach (var item in SelectedItem)
            {
                var importItem = Mapper.Map<ImportItem>(item);
                importItem.ImportId = Data.Id;
                Data.Items.Add(importItem);
            }
            MudDialog.Close(DialogResult.Ok(Data));
        }
    }


    private void OnInvalidSubmit()
    {
        // Handle invalid form submission (e.g., display error messages)
    }

    private void Cancel() => MudDialog.Cancel();

    int spacing = 0;

    #region ProductData
    private Func<SelectImportItem, bool> _quickFilterProduct => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.Id}".Contains(_searchString))
            return true;

        return false;
    };

    async void OpenAddItemDialog(ProductModel model)
    {
        if (!SelectedItem.Any(predicate: p => p.ProductId == model.Id))
        {
            var options = new DialogOptions { CloseOnEscapeKey = true, };
            var parameters = new DialogParameters { ["Model"] = model };
            var dialog = await DialogService.ShowAsync<SelectQuantityDialog>("Chọn sản phẩm", parameters, options);
            var result = await dialog.Result;

            if (!result.Canceled && result.Data is ProductModel product)
            {
                // Thêm sản phẩm mới vào danh sách
                SelectedItem.Add(new SelectImportItem
                    {
                        ProductId = product.Id,
                        ImportQty = product.Quantity,
                        ImportPrice = product.ImportPrice,
                        Name = product.Name
                    });
                StateHasChanged();
            }
        }
    }
    async Task OnCommitChanges(SelectImportItem item)
    {
        StateHasChanged();
    }
    async void RemoveItem(SelectImportItem item)
    {
        SelectedItem.Remove(item);
    }
    private Func<ProductModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.Id} {x.Quantity} {x.Price}".Contains(_searchString))
            return true;

        return false;
    };
    private async Task Submit()
    {
        var items = Mapper.Map<List<ImportItem>>(SelectedItem);
        Data.OrderBy = "EMP001";
        Data.Amount = items.Sum(a => a.Quantity * a.UnitPrice);
        Data.Items = items;
        var result = await Service.CreateAsync(Data);
    }

    #endregion
}

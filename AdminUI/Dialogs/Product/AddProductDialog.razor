@inject ProductService service
@inject HttpClient http
<MudDialog>
    <DialogContent>
        <MudForm @ref="form" Spacing="spacing" style="width:400px">
            <MudFileUpload T="IBrowserFile" @bind-Files="imgFile">
                <ActivatorContent>
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.CloudUpload">
                        Chọn ảnh
                    </MudButton>
                </ActivatorContent>
            </MudFileUpload>
            <MudTextField Variant="Variant.Outlined" Margin="Margin.Dense" T="string" Label="Mã sản phẩm" @bind-Value="id" Required="true" RequiredError="Chưa nhập mã sản phẩm"  />
            <MudTextField Variant="Variant.Outlined" Margin="Margin.Dense" T="string" Label="Tên sản phẩm" @bind-Value="name" Required="true" RequiredError="Chưa nhập tên sản phẩm" />
            <MudTextField Variant="Variant.Outlined" Margin="Margin.Dense" T="string" Label="Mô tả sản phẩm" @bind-Value="description" />
            <MudTextField InputType="InputType.Number" Variant="Variant.Outlined" Margin="Margin.Dense" T="double" Label="Đơn giá" @bind-Value="price" HelperText="Enter a valid price" Required="true" RequiredError="Chưa nhập đơn giá" />
            <MudTextField InputType="InputType.Number" Variant="Variant.Outlined" Margin="Margin.Dense" T="double" Label="Giá nhập" @bind-Value="price" HelperText="Enter a valid price" Required="true" RequiredError="Chưa có giá nhập" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Tertiary" OnClick="SubmitForm">Xác nhận</MudButton>
        <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="Cancel">Hủy</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    private MudForm form;

    IList<IBrowserFile> _files = new List<IBrowserFile>();
    IBrowserFile imgFile;

    private string id;
    private string name;
    private string description;
    private double price = 5000000;
    private double importPrice = 3500000;
    //private string category = "Personal"; // Default value

    private async Task SubmitForm()
    {
        await form.Validate();
        if (form.IsValid)
        {
            // Form is valid, close the dialog and pass the data
            var formData = new CreateProduct
                {
                    Data = new ProductModel(id, name, price, importPrice),
                    ImageFile = imgFile
                };
            var productJson = System.Text.Json.JsonSerializer.Serialize(formData.Data);
            var content = new MultipartFormDataContent();
            var stream = formData.ImageFile.OpenReadStream(maxAllowedSize:10*1024*1024);
            var fileContent = new StreamContent(stream);
            content.Add(fileContent, "ImageFile", formData.ImageFile.Name);
            content.Add(new StringContent(productJson), "DataJson");

            // Gửi yêu cầu tới API
            var response = await http.PostAsync("/api/Product/create", content);
            if (!response.IsSuccessStatusCode)
            {
                throw new Exception("Error while calling API.");
            }
            // Kiểm tra kết quả
            // Đọc dữ liệu trả về từ API (ID sản phẩm)
            var product = await response.Content.ReadFromJsonAsync<ProductResponse>();
            MudDialog.Close(DialogResult.Ok(product));
        }
    }

    private void OnInvalidSubmit()
    {
        // Handle invalid form submission (e.g., display error messages)
    }

    private void Cancel() => MudDialog.Cancel();

    int spacing = 0;
}

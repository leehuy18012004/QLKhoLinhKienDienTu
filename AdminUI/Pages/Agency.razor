@page "/agency"
@inject IDialogService DialogService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject AgencyServices Service
@inject IJSRuntime JS
@inject HttpClient Http
@using System.Net.Http.Json
@using AdminUI.ApiServices
@using AdminUI.Dialogs.Agency
@using ClosedXML.Excel;
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudDataGrid T="AgencyModel" ReadOnly="false" EditMode="DataGridEditMode.Form" QuickFilter="@_quickFilter"
             Bordered="true" Dense="true" Items="Data" Filterable="false" Hover="true" RowClick="OnRowClick"
             EditTrigger="DataGridEditTrigger.Manual" ColumnResizeMode="ResizeMode.Column" SelectedItem="tempItem" CommittedItemChanges="CommittedItemChanges"
             Virtualize="true" Loading="loading" Height="400px" FixedHeader="true">
    <ToolBarContent>

        <MudTooltip Text="Thêm kho">
            <MudIconButton Color="Color.Tertiary" Icon="@Icons.Material.Filled.Add" @onclick="OpenAddDialogAsync"></MudIconButton>
        </MudTooltip>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.End" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>

    </ToolBarContent>
    <Columns>
        <HierarchyColumn T="AgencyModel" ButtonDisabledFunc="@(x => x.Name == "He")" />
        <PropertyColumn Class="w-1" Property="x => x.Id" Title="Mã ĐL" Editable="false" />
        <PropertyColumn Property="x => x.Name" Title="Tên ĐL" />
        <PropertyColumn Property="x => x.Address" Title="Địa chỉ" />
        <PropertyColumn Property="x => x.Email" Title="Email" />
        <PropertyColumn Property="x => x.PhoneNumber" Title="SĐT" />
        <PropertyColumn Property="x => x.ContactPerson" Title="Người liên hệ" />
        <TemplateColumn Hidden="false" StickyRight="false" Class="w-1" CellClass="d-flex justify-center">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Color="Color.Warning" OnClick="@context.Actions.StartEditingItemAsync" />
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="()=> ShowDeleteConfirmation(context.Item)" />
                @if (context.Item.Discontinued)
                {
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.LockPerson" Color="Color.Dark" OnClick="()=> ShowDeleteConfirmation(context.Item)" />
                }
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <ChildRowContent>
        <MudText>Địa chỉ: @context.Item.Address</MudText>
        <MudText>Email: @context.Item.Email</MudText>
        <MudText>SĐT: @context.Item.PhoneNumber</MudText>
    </ChildRowContent>
    <PagerContent>
        <MudDataGridPager T="AgencyModel" />
    </PagerContent>
</MudDataGrid>
<script>
    window.downloadFileFromByteArray = (fileName, byteArray) => {
        // Tạo Blob từ byte array
        var blob = new Blob([byteArray], { type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" });
        var url = URL.createObjectURL(blob);

        // Tạo thẻ <a> để tải file xuống
        var anchor = document.createElement("a");
        anchor.href = url;
        anchor.download = fileName;

        // Thêm thẻ <a> vào DOM và click để tải file
        document.body.appendChild(anchor);
        anchor.click();

        // Sau đó xóa thẻ <a> đi để dọn dẹp
        document.body.removeChild(anchor);
        URL.revokeObjectURL(url);
    };
</script>
@code {
    #region fields - Properties
    private bool loading = true;
    private List<string> _events = new();
    public List<AgencyModel> Data { get; set; } = new List<AgencyModel>();
    public List<AgencyModel> ExcelData { get; set; }
    string _searchString = null!;
    AgencyModel tempItem = null!;
    IList<IBrowserFile> _files = new List<IBrowserFile>();
    #endregion

    #region Life cycle
    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (!user.Identity.IsAuthenticated)
        {
            Navigation.NavigateTo("login");
        }
        if (!user.IsInRole("admin"))
        {
            Navigation.NavigateTo("access-denied");
        }
        try
        {
            await Task.Delay(100);
            loading = true;
            Data = await Service.GetAllAsync();
        }
        catch
        {
            Snackbar.Add("Gọi API thất bại, vui lòng kiểm tra lại server!", Severity.Error);
            //Snackbar.Add("Tạm thời sử dụng dữ liệu giả!", Severity.Warning);
        }
        finally
        {
            loading = false;
        }

    }
    #endregion



    #region Sự kiện


    //Tìm kiếm
    private Func<AgencyModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.Id} {x.ContactPerson} {x.Email} {x.PhoneNumber}".Contains(_searchString))
            return true;

        return false;
    };
    private void OnRowClick(DataGridRowClickEventArgs<AgencyModel> args)
    {
        OpenViewDialog(args.Item);
        StateHasChanged();
    }
    void StartedEditingItem(AgencyModel item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
        tempItem = item;
    }

    void CanceledEditingItem(AgencyModel item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    async void CommittedItemChanges(AgencyModel item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
        var result = await Service.Update(item);
        if (!result)
        {
            Snackbar.Add("Không thể cập nhật!", Severity.Error);
            Data.Remove(item);
            Data.Insert(0, tempItem);
            StateHasChanged();
        }
        else
        {
            Snackbar.Add("Đã cập nhật sản phẩm thành công!", Severity.Success);
        }
    }
    void ShowMessage(string msg, string key = null!)
    {
        var config = (SnackbarOptions options) =>
        {
            options.DuplicatesBehavior = SnackbarDuplicatesBehavior.Prevent;
        };
        Snackbar.Add(msg, Severity.Info, configure: config, key: key);
    }
    #endregion

    #region Xóa
    private async Task ShowDeleteConfirmation(AgencyModel item)
    {
        var parameters = new DialogParameters { ["Message"] = $"Hãy cân nhắc kỹ trước khi xóa {item.Name}" };
        var options = new DialogOptions { CloseButton = false, CloseOnEscapeKey = true };

        var dialog = DialogService.Show<ConfirmDialog>("Xác nhận xóa?", parameters, options);
        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            DeleteItem(item);
        }
    }
    private async Task OpenAddDialogAsync()
    {
        loading = true;
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<AddAgencyDialog>("Thêm Đại lý", options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is AgencyModel model)
        {
            // Thêm sản phẩm mới vào danh sách
            await Task.Delay(500);
            bool formResult = await Service.CreateAsync(model);
            if (formResult)
            {
                Data.Insert(0, model);
                Snackbar.Add("Đã thêm đại lý thành công!", Severity.Success);
                StateHasChanged();
            }
            else
            {
                Snackbar.Add("Đã xảy ra lỗi :(", Severity.Error);
            }
        }
        loading = false;
    }

    private async void DeleteItem(AgencyModel item)
    {

        var result = await Service.Delete(item.Id); //gọi api xóa trên server
        if (result == true) //kiểm tra kết quả
        {
            Data.Remove(item); //Xóa tại frontend
            StateHasChanged();
            //Snackbar.Add($"Xóa thành công", Severity.Info);
            //tạo toast thông báo
            Snackbar.Add($"Xóa thành công", Severity.Info);
        }
        else
        {
            Snackbar.Add($"Không thể xóa", Severity.Error);
        }
    }

    #endregion
    private void NavigateTo(string page)
    {
        Navigation.NavigateTo(page);
    }

    private void OpenViewDialog(AgencyModel model)
    {
        var parameters = new DialogParameters { ["Data"] = model }; //gửi tham chiếu tới dialog
        var options = new DialogOptions { CloseOnEscapeKey = true }; //cho phép tắt dialog khi bấm nút Esc

        DialogService.Show<AgencyViewDialog>("Thông nhân viên", parameters, options); //Bật dialog
    }
}
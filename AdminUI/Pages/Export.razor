@page "/Export"

@inject IDialogService DialogService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject ExportServices Service
@inject OrderService OrderService
@inject ProductService ProductService
@inject IJSRuntime JS
@inject HttpClient Http
@inject IMapper Mapper
@using System.Net.Http.Json
@using AdminUI.ApiServices
@using AdminUI.Dialogs.Export
@using AdminUI.Objects.Request
@using AutoMapper
@using ClosedXML.Excel
@inject AuthenticationStateProvider AuthenticationStateProvider


<MudTabs Elevation="1" Rounded="false" Centered="true">
    <MudTabPanel Text="Phiếu xuất">
        <div class="pt-10 px-10">
            <MudDataGrid T="ExportModel" ReadOnly="false" EditMode="DataGridEditMode.Form" QuickFilter="@_quickFilter"
                         Bordered="true" Dense="true" Items="Exports" Filterable="false" Hover="true" 
                         EditTrigger="DataGridEditTrigger.Manual" ColumnResizeMode="ResizeMode.Column" SelectedItem="tempItem"
                         Virtualize="true" Loading="loading" Height="400px" FixedHeader="true">
                <ToolBarContent>

                    <MudTooltip Text="Thêm kho">
                        <MudIconButton Color="Color.Tertiary" Icon="@Icons.Material.Filled.Add" @onclick="OpenAddDialogAsync"></MudIconButton>
                    </MudTooltip>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.End" Immediate="true"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>

                </ToolBarContent>
                <Columns>
                    <PropertyColumn Property="x => x.Id" Title="Mã Phiếu" Editable="false" />
                    <PropertyColumn Format="dd/MM/yyyy" Property="x => x.ExportDate" Title="Ngày Xuất" />
                    <PropertyColumn Property="x => x.ManagerName" Title="Người Duyệt" />
                    <PropertyColumn Format="#,0 đ" Property="x => x.Amount" Title="Thành tiền" />

                    <TemplateColumn Hidden="false" StickyRight="false" Class="w-1" CellClass="d-flex justify-center">
                        <CellTemplate>
                            <MudChip Size="@Size.Medium" Icon="@Icons.Material.Outlined.Edit" Color="Color.Info" Text="Cập nhật" OnClick="@context.Actions.StartEditingItemAsync" />

                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="ExportModel" />
                </PagerContent>
            </MudDataGrid>
        </div>
    </MudTabPanel>
    <MudTabPanel Text="Duyệt đơn" BadgeData='Orders.Count' BadgeColor="Color.Error">
        <div class="pt-10 px-10">
            <Order Data="Data" Orders="Orders" OnOrderApproved="OnOrderApproved" />
        </div>
    </MudTabPanel>
</MudTabs>

<script>
    window.downloadFileFromByteArray = (fileName, byteArray) => {
        // Tạo Blob từ byte array
        var blob = new Blob([byteArray], { type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" });
        var url = URL.createObjectURL(blob);

        // Tạo thẻ <a> để tải file xuống
        var anchor = document.createElement("a");
        anchor.href = url;
        anchor.download = fileName;

        // Thêm thẻ <a> vào DOM và click để tải file
        document.body.appendChild(anchor);
        anchor.click();

        // Sau đó xóa thẻ <a> đi để dọn dẹp
        document.body.removeChild(anchor);
        URL.revokeObjectURL(url);
    };
</script>
@code {
    #region fields - Properties
    private bool loading = true;
    private List<string> _events = new();
    public List<ExportModel> Data { get; set; } = new List<ExportModel>();
    public List<ExportModel> Exports { get; set; } = new List<ExportModel>();
    public List<ExportModel> Orders { get; set; } = new List<ExportModel>();

    string _searchString = null!;
    ExportModel tempItem = null!;
    IList<IBrowserFile> _files = new List<IBrowserFile>();
    private readonly DialogOptions dialogOptions = new() { MaxWidth = MaxWidth.Medium, FullWidth = true };
    #endregion

    #region ExportData
    protected async override Task OnInitializedAsync()
    {
        // var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        // var user = authState.User;
        // if (!user.Identity.IsAuthenticated)
        // {
        //     Navigation.NavigateTo("login");
        // }
        // if (!user.IsInRole("admin"))
        // {
        //     Navigation.NavigateTo("access-denied");
        // }
        try
        {
            loading = true;
            await Task.Delay(300);
            LoadDataAsync();
        }
        catch
        {
            Snackbar.Add("Gọi API thất bại, vui lòng kiểm tra lại server!", Severity.Error);
            //Snackbar.Add("Tạm thời sử dụng dữ liệu giả!", Severity.Warning);
        }
        finally
        {
            loading = false;
        }

    }
    private async Task LoadDataAsync()
    {
        Data = await Service.GetAllAsync();
        Exports = Data.Where(p => p.Status == ExportStatus.Completed || p.Status == ExportStatus.InProgress || p.Status == ExportStatus.Canceled).ToList();
        Orders = Data.Where(p => p.Status == ExportStatus.Pending).ToList();
        StateHasChanged();
    }
    //Tìm kiếm
    private Func<ExportModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        // if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
        //     return true;

        // if (x.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
        //     return true;

        if ($"{x.Id} {x.AgencyId}".Contains(_searchString))
            return true;

        return false;
    };
    private void OnRowClick(DataGridRowClickEventArgs<ExportModel> args)
    {
        OpenViewDialog(args.Item);
        StateHasChanged();
    }

    void ShowMessage(string msg, string key = null!)
    {
        var config = (SnackbarOptions options) =>
        {
            options.DuplicatesBehavior = SnackbarDuplicatesBehavior.Prevent;
        };
        Snackbar.Add(msg, Severity.Info, configure: config, key: key);
    }

    private async Task OpenAddDialogAsync()
    {
        loading = true;
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true, NoHeader = true };
        var dialog = await DialogService.ShowAsync<ViewProductDialog>("Tạo đơn nhập", options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is OrderRequest model)
        {
            // Thêm sản phẩm mới vào danh sách
            await Task.Delay(500);
            var formResult = await OrderService.CreateAsync(model);
            // if (formResult)
            // {
            //     Data.Insert(0, model);
            //     Snackbar.Add("Tạo đơn thành công!", Severity.Success);
            //     StateHasChanged();
            // }
            // else
            // {
            //     Snackbar.Add("Đã xảy ra lỗi :(", Severity.Error);
            // }
        }
        loading = false;
    }

    private void OpenViewDialog(ExportModel model)
    {
        var parameters = new DialogParameters { ["Data"] = model }; //gửi tham chiếu tới dialog
        var options = new DialogOptions { CloseOnEscapeKey = true }; //cho phép tắt dialog khi bấm nút Esc

        DialogService.Show<ExportViewDialog>("Thông tin phiếu xuất", parameters, options); //Bật dialog
    }

    private async Task OnOrderApproved(ExportModel data)
    {
        RefreshData(data);
    }
    private void RefreshData(ExportModel data)
    {
        Exports.Insert(0, data);
        StateHasChanged();
    }
    #endregion

}
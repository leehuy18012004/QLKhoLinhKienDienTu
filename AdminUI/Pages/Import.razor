@page "/import"

@inject IDialogService DialogService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject ImportServices Service
@inject ProductService ProductService
@inject IJSRuntime JS
@inject HttpClient Http
@inject IMapper Mapper
@using System.Net.Http.Json
@using AdminUI.ApiServices
@using AdminUI.Dialogs.Import
@using AutoMapper
@using ClosedXML.Excel
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="pt-10 px-10">
    <MudDataGrid T="ImportModel" ReadOnly="false" EditMode="DataGridEditMode.Form" QuickFilter="@_quickFilter"
                 Bordered="true" Dense="false" Items="Data" Filterable="false" Hover="true" RowClick="OnRowClick"
                 EditTrigger="DataGridEditTrigger.Manual" ColumnResizeMode="ResizeMode.Column" SelectedItem="tempItem"
                 Virtualize="true" Loading="loading" Height="400px" FixedHeader="true">
        <ToolBarContent>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.AddCircle" @onclick="OpenAddDialogAsync">Nhập đơn</MudButton>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.End" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>

        </ToolBarContent>
        <Columns>
            <PropertyColumn Class="w-1" Property="x => x.Id" Title="Mã đơn" Editable="false" />
            <PropertyColumn Property="x => x.WarehouseName" Title="Kho" />
            <PropertyColumn Property="x => x.SuplierName" Title="Nhà cung cấp" />
            <PropertyColumn Format="@("#,0 đ")" Property="x => x.Amount" Title="Tiền nhập" />
            <PropertyColumn Format="dd/MM/yyyy" Property="x => x.CreatedOn" Title="Ngày nhập" />
            <PropertyColumn Property="x => x.ManagerName" Title="Người nhập" />
        </Columns>
        <PagerContent>
            <MudDataGridPager T="ImportModel" />
        </PagerContent>
    </MudDataGrid>
</div>

<script>
    window.downloadFileFromByteArray = (fileName, byteArray) => {
        // Tạo Blob từ byte array
        var blob = new Blob([byteArray], { type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" });
        var url = URL.createObjectURL(blob);

        // Tạo thẻ <a> để tải file xuống
        var anchor = document.createElement("a");
        anchor.href = url;
        anchor.download = fileName;

        // Thêm thẻ <a> vào DOM và click để tải file
        document.body.appendChild(anchor);
        anchor.click();

        // Sau đó xóa thẻ <a> đi để dọn dẹp
        document.body.removeChild(anchor);
        URL.revokeObjectURL(url);
    };
</script>
@code {
    #region fields - Properties
    private bool loading = true;
    private List<string> _events = new();
    public List<ImportModel> Data { get; set; } = new List<ImportModel>();
    string _searchString = null!;
    ImportModel tempItem = null!;
    IList<IBrowserFile> _files = new List<IBrowserFile>();
    private readonly DialogOptions dialogOptions = new() { MaxWidth = MaxWidth.Medium, FullWidth = true };
    #endregion

    #region ImportData
    protected async override Task OnInitializedAsync()
    {
        // var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        // var user = authState.User;
        // if (!user.Identity.IsAuthenticated)
        // {
        //     Navigation.NavigateTo("login");
        // }
        // if (!user.IsInRole("admin"))
        // {
        //     Navigation.NavigateTo("access-denied");
        // }
        try
        {
            await Task.Delay(100);
            loading = true;
            Data = await Service.GetAllAsync();
        }
        catch
        {
            Snackbar.Add("Gọi API thất bại, vui lòng kiểm tra lại server!", Severity.Error);
            //Snackbar.Add("Tạm thời sử dụng dữ liệu giả!", Severity.Warning);
        }
        finally
        {
            loading = false;
        }

    }

    //Tìm kiếm
    private Func<ImportModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Id.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.WarehouseName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.SuplierName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.SuplierName}".Contains(_searchString))
            return true;

        return false;
    };
    private void OnRowClick(DataGridRowClickEventArgs<ImportModel> args)
    {
        OpenViewDialog(args.Item);
        StateHasChanged();
    }
    void StartedEditingItem(ImportModel item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
        tempItem = item;
    }

    void CanceledEditingItem(ImportModel item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    async void CommittedItemChanges(ImportModel item)
    {
    }


    void ShowMessage(string msg, string key = null!)
    {
        var config = (SnackbarOptions options) =>
        {
            options.DuplicatesBehavior = SnackbarDuplicatesBehavior.Prevent;
        };
        Snackbar.Add(msg, Severity.Info, configure: config, key: key);
    }

    private async Task OpenAddDialogAsync()
    {
        loading = true;
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true, NoHeader = true };
        var dialog = await DialogService.ShowAsync<AddImportDialog>("Tạo đơn nhập", options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is ImportModel model)
        {
            // Thêm sản phẩm mới vào danh sách
            await Task.Delay(500);
            var dataResponse = await Service.CreateAsync(model);
            if (dataResponse != null)
            {
                Data.Insert(0, dataResponse);
                Snackbar.Add("Đã thêm đại lý thành công!", Severity.Success);
                StateHasChanged();
            }
            else
            {
                Snackbar.Add("Đã xảy ra lỗi :(", Severity.Error);
            }
        }
        loading = false;
    }
    async void ShowDeleteConfirmation(ImportModel model)
    {

    }

    private void NavigateTo(string page)
    {
        Navigation.NavigateTo(page);
    }

    private void OpenViewDialog(ImportModel model)
    {
        var parameters = new DialogParameters { ["Model"] = model }; //gửi tham chiếu tới dialog
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true, NoHeader = true };

        DialogService.Show<ImportViewDialog>("Thông tin phiếu nhập", parameters, options); //Bật dialog
    }
    #endregion

}